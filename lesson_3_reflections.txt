    When would you want to use a remote repository rather than keeping all your work 
    local?

When collaborating with others a remote would be useful. Additionally, if you 
want to allow others access to experimental or developmental code between 
releases, using a remote repository would make that simple.


    Why might you want to always pull changes manually rather than having Git 
    automatically stay up-to-date with your remote repository?

You might be working on something in your local repository that you are not 
ready to share, and you dont want an automatic pull to overwrite or modify and 
changes you're working on.


    Describe the differences between forks, clones, and branches. When would you use 
    one instead of another?

Clones create a copy of a repository with the exact same committs present in the 
original cloned repository. A fork is essentially the same, except that it is 
done on Github and it links back to the original repository despite being 
considered its own seperate new repository. A branch pertains more to individual 
repositories. Branching allows you to implement features within an existing 
repository with out chaning your main code base. For example to implement 
experimental features that you may decide you do not want in the long run.


    What is the benefit of having a copy of the last known state of the remote 
    stored locally?

You may want to work on a project from a place without internet access at some 
point, and by storing the most recent state of the remote you can compare your 
changes to that branch. This will allow you to know if you are ahead of the 
branch, behindm or out of sync.


    How would you collaborate without using Git or GitHub? What would be easier, and 
    what would be harder?

I would probably use another form of version control software. In the past I 
have used subversion. I think Git had a steeper learning curve, but now that I'm 
learning it, I do not really find it any harder. I guess I would just say 
learning Git is harder, but regular use is not. I find the ability to do offline 
version control makes working easier, which puts Git a step ahead of svn in that 
regard.


    When would you want to make changes in a separate branch rather than directly in 
    master? What benefits does each approach have?

There are a couple of reasons you might want to make changes in a seperate 
branch rather than master. One case would be to make changes you are unsure you 
will want to stick with long term, or that have the potential to break the 
project. This allows you make changes in the main code base without worrying 
about the effect the experimental would have on your code. Another situation you 
may want to use branches for is in collaboration. If you would like you 
implement a feature but want to get approval from other team members before 
applying it to the main code base, you can push it to the hub as a seperate 
branch and create a pull request. This allows other developers to look it over 
before merging it into the master branch. One benefit to merging directly into 
the master branch might be that your changes are applied immediately and there 
will be less work required to add the changes than there would be if it stayed 
in a seperate branch for too long and many changes were made to the master 
branch that caused merge conflicts.
